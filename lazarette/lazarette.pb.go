// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lazarette.proto

package lazarette

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Key struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dee828422544be, []int{0}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Value struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data                 []byte               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dee828422544be, []int{1}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Value) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type KeyValue struct {
	Key                  string               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data                 []byte               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dee828422544be, []int{2}
}

func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValue.Unmarshal(m, b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return xxx_messageInfo_KeyValue.Size(m)
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *KeyValue) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Replication struct {
	RemoteAddr           string   `protobuf:"bytes,1,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	Prefix               string   `protobuf:"bytes,2,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Replication) Reset()         { *m = Replication{} }
func (m *Replication) String() string { return proto.CompactTextString(m) }
func (*Replication) ProtoMessage()    {}
func (*Replication) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dee828422544be, []int{3}
}

func (m *Replication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Replication.Unmarshal(m, b)
}
func (m *Replication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Replication.Marshal(b, m, deterministic)
}
func (m *Replication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Replication.Merge(m, src)
}
func (m *Replication) XXX_Size() int {
	return xxx_messageInfo_Replication.Size(m)
}
func (m *Replication) XXX_DiscardUnknown() {
	xxx_messageInfo_Replication.DiscardUnknown(m)
}

var xxx_messageInfo_Replication proto.InternalMessageInfo

func (m *Replication) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *Replication) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func init() {
	proto.RegisterType((*Key)(nil), "lazarette.Key")
	proto.RegisterType((*Value)(nil), "lazarette.Value")
	proto.RegisterType((*KeyValue)(nil), "lazarette.KeyValue")
	proto.RegisterType((*Replication)(nil), "lazarette.Replication")
}

func init() { proto.RegisterFile("lazarette.proto", fileDescriptor_71dee828422544be) }

var fileDescriptor_71dee828422544be = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x86, 0x29, 0x55, 0x62, 0x07, 0x3f, 0xc8, 0x98, 0x20, 0xa9, 0x89, 0x92, 0x9e, 0xf0, 0x52,
	0x0c, 0x7a, 0xf0, 0xca, 0x81, 0x78, 0xc0, 0x83, 0x59, 0xfc, 0x38, 0x6f, 0x61, 0xc0, 0xd5, 0xd6,
	0x6d, 0xca, 0x90, 0x58, 0xff, 0xaf, 0xff, 0xc3, 0xb0, 0xa5, 0x50, 0xac, 0x5e, 0xbc, 0xed, 0xce,
	0x3c, 0xfb, 0x3e, 0x99, 0x1d, 0x38, 0x0a, 0xe5, 0xa7, 0x4c, 0x88, 0x99, 0xfc, 0x38, 0xd1, 0xac,
	0xd1, 0x59, 0x17, 0xdc, 0xf3, 0x99, 0xd6, 0xb3, 0x90, 0xba, 0xa6, 0x11, 0x2c, 0xa6, 0x5d, 0x56,
	0x11, 0xcd, 0x59, 0x46, 0x71, 0xc6, 0xba, 0xa7, 0x3f, 0x01, 0x8a, 0x62, 0x4e, 0xb3, 0xa6, 0x77,
	0x02, 0xf6, 0x90, 0x52, 0x6c, 0x80, 0xfd, 0x46, 0x69, 0xcb, 0x6a, 0x5b, 0x1d, 0x47, 0x2c, 0x8f,
	0xde, 0x23, 0xec, 0x3e, 0xc9, 0x70, 0x41, 0x78, 0x03, 0xce, 0x3a, 0xd1, 0x00, 0xf5, 0x9e, 0xeb,
	0x67, 0x91, 0x7e, 0x1e, 0xe9, 0x3f, 0xe4, 0x84, 0xd8, 0xc0, 0x88, 0xb0, 0x33, 0x91, 0x2c, 0x5b,
	0xd5, 0xb6, 0xd5, 0xd9, 0x17, 0xe6, 0xec, 0xbd, 0xc2, 0xde, 0x90, 0xd2, 0x2c, 0xb9, 0x24, 0xdd,
	0x76, 0x55, 0xff, 0xe3, 0xb2, 0x0b, 0xae, 0x01, 0xd4, 0x05, 0xc5, 0xa1, 0x1a, 0x4b, 0x56, 0xfa,
	0x1d, 0xcf, 0x00, 0x04, 0x45, 0x9a, 0xa9, 0x3f, 0x99, 0x24, 0x2b, 0x6b, 0xa1, 0x82, 0x4d, 0xa8,
	0xdd, 0x27, 0x34, 0x55, 0x1f, 0xc6, 0xec, 0x88, 0xd5, 0xad, 0xf7, 0x65, 0x81, 0x73, 0x97, 0x7f,
	0x37, 0x5e, 0x80, 0x7d, 0x4b, 0x8c, 0x87, 0xfe, 0x66, 0x25, 0x43, 0x4a, 0xdd, 0x46, 0xe1, 0x6e,
	0xa6, 0xf3, 0x2a, 0x78, 0x0d, 0xf6, 0x88, 0x18, 0x8f, 0xb7, 0x51, 0xd3, 0x75, 0x9b, 0xa5, 0xb1,
	0x06, 0xcb, 0xad, 0x98, 0x57, 0xce, 0x68, 0x11, 0xcc, 0xc7, 0x89, 0x0a, 0xa8, 0xa4, 0xf9, 0x2d,
	0xcb, 0xab, 0x5c, 0x5a, 0xd8, 0x87, 0x83, 0x7c, 0x56, 0x7a, 0x56, 0xfc, 0x82, 0xcd, 0x02, 0x59,
	0xf8, 0x85, 0xbf, 0xc5, 0x41, 0xcd, 0x54, 0xae, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x71, 0x49,
	0xf4, 0x2a, 0x6d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LazaretteClient is the client API for Lazarette service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LazaretteClient interface {
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
	Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Subscribe(ctx context.Context, in *Key, opts ...grpc.CallOption) (Lazarette_SubscribeClient, error)
	ReplicateWith(ctx context.Context, in *Replication, opts ...grpc.CallOption) (*empty.Empty, error)
}

type lazaretteClient struct {
	cc *grpc.ClientConn
}

func NewLazaretteClient(cc *grpc.ClientConn) LazaretteClient {
	return &lazaretteClient{cc}
}

func (c *lazaretteClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/lazarette.Lazarette/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lazaretteClient) Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lazarette.Lazarette/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lazaretteClient) Subscribe(ctx context.Context, in *Key, opts ...grpc.CallOption) (Lazarette_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Lazarette_serviceDesc.Streams[0], "/lazarette.Lazarette/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &lazaretteSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lazarette_SubscribeClient interface {
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type lazaretteSubscribeClient struct {
	grpc.ClientStream
}

func (x *lazaretteSubscribeClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lazaretteClient) ReplicateWith(ctx context.Context, in *Replication, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lazarette.Lazarette/ReplicateWith", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LazaretteServer is the server API for Lazarette service.
type LazaretteServer interface {
	Get(context.Context, *Key) (*Value, error)
	Set(context.Context, *KeyValue) (*empty.Empty, error)
	Subscribe(*Key, Lazarette_SubscribeServer) error
	ReplicateWith(context.Context, *Replication) (*empty.Empty, error)
}

// UnimplementedLazaretteServer can be embedded to have forward compatible implementations.
type UnimplementedLazaretteServer struct {
}

func (*UnimplementedLazaretteServer) Get(ctx context.Context, req *Key) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedLazaretteServer) Set(ctx context.Context, req *KeyValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedLazaretteServer) Subscribe(req *Key, srv Lazarette_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedLazaretteServer) ReplicateWith(ctx context.Context, req *Replication) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateWith not implemented")
}

func RegisterLazaretteServer(s *grpc.Server, srv LazaretteServer) {
	s.RegisterService(&_Lazarette_serviceDesc, srv)
}

func _Lazarette_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LazaretteServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lazarette.Lazarette/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LazaretteServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lazarette_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LazaretteServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lazarette.Lazarette/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LazaretteServer).Set(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lazarette_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Key)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LazaretteServer).Subscribe(m, &lazaretteSubscribeServer{stream})
}

type Lazarette_SubscribeServer interface {
	Send(*KeyValue) error
	grpc.ServerStream
}

type lazaretteSubscribeServer struct {
	grpc.ServerStream
}

func (x *lazaretteSubscribeServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func _Lazarette_ReplicateWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Replication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LazaretteServer).ReplicateWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lazarette.Lazarette/ReplicateWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LazaretteServer).ReplicateWith(ctx, req.(*Replication))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lazarette_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lazarette.Lazarette",
	HandlerType: (*LazaretteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Lazarette_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Lazarette_Set_Handler,
		},
		{
			MethodName: "ReplicateWith",
			Handler:    _Lazarette_ReplicateWith_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Lazarette_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lazarette.proto",
}
